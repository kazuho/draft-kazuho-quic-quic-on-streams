{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2025-07-22T00:30:56.689389+00:00",
  "repo": "kazuho/draft-kazuho-quic-quic-on-streams",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    }
  ],
  "issues": [
    {
      "number": 4,
      "id": "I_kwDOKxyMNc5_cwxL",
      "title": "remove the offset from STREAM frames",
      "url": "https://github.com/kazuho/draft-kazuho-quic-quic-on-streams/issues/4",
      "state": "OPEN",
      "author": "marten-seemann",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Because we obviously can on an ordered transport. Also gets rid of the need to check for ordering. ",
      "createdAt": "2024-02-16T09:55:22Z",
      "updatedAt": "2024-02-21T14:13:00Z",
      "closedAt": null,
      "comments": [
        {
          "author": "marten-seemann",
          "authorAssociation": "NONE",
          "body": "Similarly for BLOCKED* frames and RESET_STREAM frames.",
          "createdAt": "2024-02-16T11:02:40Z",
          "updatedAt": "2024-02-16T11:02:40Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "OWNER",
          "body": "Thanks,\r\n\r\nThe approach adopted by the initial draft is to facilitate code reuse between QUIC v1 and QUIC for Streams, by minimize the changes to the frame encoding. We prohibit use of some frames, but otherwise the frame encodings are left unmodified.\r\n\r\nAs stated on the mailing list, I think [the proposal](https://mailarchive.ietf.org/arch/msg/quic/HL_doKGvcBTrByv-69QeY0hJUKY/) by @hlandau to prohibit use of STREAM frames without Length field seems palatable. Because it is just have prohibiting use of some 1-byte frame code points.\r\n\r\nHowever, I have the fear of changing the encoding of each frame, as IMO that would only increase the cost of maintaining the two QUIC stacks (i.e,. QUIC v1 and QUIC on Streams), due to having increased divergence.\r\n\r\nPS. I'm not sure if we can remove the Offset field of BLOCKED* frames, recalling that communicating the moment of getting blocked has been considered a valuable property of those frames. Also, for RESET_STREAM frames, I'm not sure if we want to (or have to) mandate that the final offset being \"sent\" should mean exactly the offset to which a QoS stack has written to the TCP send buffer.",
          "createdAt": "2024-02-19T00:50:08Z",
          "updatedAt": "2024-02-19T00:51:08Z"
        },
        {
          "author": "hlandau",
          "authorAssociation": "NONE",
          "body": "- I agree we generally shouldn't change frame encodings.\r\n- Prohibiting encodings is a different matter and I definitely think it is the better option to prohibit the implicit length encoding here.\r\n- I don't think it is worth removing the offset field even if it is technically unnecessary and saves a marginal amount of bandwidth. We should preserve the encodings.",
          "createdAt": "2024-02-21T14:12:59Z",
          "updatedAt": "2024-02-21T14:12:59Z"
        }
      ]
    },
    {
      "number": 5,
      "id": "I_kwDOKxyMNc5_iIsc",
      "title": "point out that migration is provided by MPTCP",
      "url": "https://github.com/kazuho/draft-kazuho-quic-quic-on-streams/issues/5",
      "state": "OPEN",
      "author": "kazuho",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "as pointed out in https://mailarchive.ietf.org/arch/msg/quic/tkZyGmV8HelRR9BSpwwbYv6v0qE/.",
      "createdAt": "2024-02-17T00:05:28Z",
      "updatedAt": "2024-02-17T00:05:28Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 6,
      "id": "I_kwDOKxyMNc6ATWJe",
      "title": "Clearly document downsides",
      "url": "https://github.com/kazuho/draft-kazuho-quic-quic-on-streams/issues/6",
      "state": "OPEN",
      "author": "LPardue",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I received an off-comment list that the downsides of this proposal compared to native QUIC could be more clearly documented.",
      "createdAt": "2024-02-25T01:37:39Z",
      "updatedAt": "2024-02-26T16:00:21Z",
      "closedAt": null,
      "comments": [
        {
          "author": "frochet",
          "authorAssociation": "NONE",
          "body": "It could be great to precise that those downsides can be fixed through \"TCPLS extensions on QUIC on streams\", as per our off-list discussion. This would also acknowledge our work, given how close it is to QUIC on streams. Thanks!",
          "createdAt": "2024-02-26T16:00:20Z",
          "updatedAt": "2024-02-26T16:00:20Z"
        }
      ]
    },
    {
      "number": 9,
      "id": "I_kwDOKxyMNc6AbzC9",
      "title": "Risks of deadlock due to flow control",
      "url": "https://github.com/kazuho/draft-kazuho-quic-quic-on-streams/issues/9",
      "state": "OPEN",
      "author": "LPardue",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Roberto Peon highlighted on the list discussion that some streams, like TCP, have flow control that could interfere with control messages required at the QUIC or higher layers. In particular, layered flow controlbut not restricted to that. \r\n\r\nHTTP/2 has some discussion about this in https://www.rfc-editor.org/rfc/rfc9113.html#name-appropriate-use-of-flow-con\r\n\r\nWe need some text that gives due consideration to the matter. Potentially offering some recommendations to higher-level protocols that might add even more stuff on top of QUIC. One proposal from Roberto was `...require always reading all bytes/frames sent on the socket, always.` but we should give a bit more thought to the topic.",
      "createdAt": "2024-02-26T17:52:36Z",
      "updatedAt": "2024-04-03T07:14:51Z",
      "closedAt": null,
      "comments": [
        {
          "author": "hlandau",
          "authorAssociation": "NONE",
          "body": "My own assumption is that implementations indeed would \"always read all bytes/frames sent on the socket, always\", in which case this isn't an issue. So my question is, is there a valid rationale for an implementation not doing that?\r\n\r\nIn terms of hardening against resource consumption attacks, if an implementation always reads all bytes/frames sent on the socket, every frame sent either\r\n\r\n1. has no effect, or\r\n2. mutates internal data structures of finite size, or\r\n3. adds stream data.\r\n\r\nOnly (3) seems an issue, but that is all governed by QUIC flow control and will result in connection termination if the protocol rules are violated.\r\n\r\nAm I missing something here?\r\n\r\nI suppose an implementation could send an unreasonable volume of PADDING frames, or of expensive-to-process frames like ACK. It seems like it would be OK for an implementation to *rate-limit* the processing of incoming data so long as the rate isn't zero.",
          "createdAt": "2024-04-03T07:14:50Z",
          "updatedAt": "2024-04-03T07:14:50Z"
        }
      ]
    },
    {
      "number": 11,
      "id": "I_kwDOKxyMNc62AVpE",
      "title": "Support Datagrams",
      "url": "https://github.com/kazuho/draft-kazuho-quic-quic-on-streams/issues/11",
      "state": "OPEN",
      "author": "huitema",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Many applications require support of Datagram -- e.g., MoQ. How is that expected to work?",
      "createdAt": "2025-05-10T02:00:56Z",
      "updatedAt": "2025-05-13T01:10:22Z",
      "closedAt": null,
      "comments": [
        {
          "author": "LPardue",
          "authorAssociation": "COLLABORATOR",
          "body": "That's already defined in https://kazuho.github.io/draft-kazuho-quic-quic-on-streams/draft-kazuho-quic-quic-on-streams.html#section-8.1. If you have comments on that text, happy to discuss more",
          "createdAt": "2025-05-10T02:03:30Z",
          "updatedAt": "2025-05-10T02:03:30Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "NONE",
          "body": "Sorry, I missed that. I suppose there was a discussion about the frame size -- common max for all frames, versus common max for datagrams, effects on multiplexing and flow control, etc.",
          "createdAt": "2025-05-10T02:06:30Z",
          "updatedAt": "2025-05-10T02:06:30Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "OWNER",
          "body": "@huitema \n> I suppose there was a discussion about the frame size -- common max for all frames, versus common max for datagrams, effects on multiplexing and flow control, etc.\n\nWhen the underlying transport is a byte stream, we can no longer rely on packetization to determine how long a frame is. This is indeed a problem for some variants of STREAM frames and DATAGRAM frames that omit the length field.\n\nTo compensate, the draft defines a new transport parameter called `max_frame_size`, which is used to determine how long a frame can be; please see [section 4.1.1](https://kazuho.github.io/draft-kazuho-quic-quic-on-streams/draft-kazuho-quic-quic-on-streams.html#name-stream-frames-without-the-l). The default value is 16KB. Datagram frame also uses this transport parameter (see section 8.1).\n\nRegarding effects on multiplexing and flow control, my gut feeling is that using 16K as the default due to the following reasons:\n* 16K is the default max of TLS records\n* 16K is the default max of HTTP/2 frames\n* QUIC v1 supports datagrams up to 65535 bytes.",
          "createdAt": "2025-05-13T01:10:21Z",
          "updatedAt": "2025-05-13T01:10:21Z"
        }
      ]
    },
    {
      "number": 12,
      "id": "I_kwDOKxyMNc62AWEl",
      "title": "TLS profile",
      "url": "https://github.com/kazuho/draft-kazuho-quic-quic-on-streams/issues/12",
      "state": "OPEN",
      "author": "huitema",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I understand that QUIC \"on stream\" is designed to run on any stream, but the documentation says \"such as TLS\". It would be nice to have something like a profile for running on top of TLS, or maybe on top of HTTPS/Connect.",
      "createdAt": "2025-05-10T02:03:38Z",
      "updatedAt": "2025-05-13T17:43:15Z",
      "closedAt": null,
      "comments": [
        {
          "author": "LPardue",
          "authorAssociation": "COLLABORATOR",
          "body": "Can you explain what you mean by profile? There are sometime specific considerations that need to be made (e.g. when using TLS 0-RTT documented in https://kazuho.github.io/draft-kazuho-quic-quic-on-streams/draft-kazuho-quic-quic-on-streams.html#name-using-0-rtt  , but otherwise there's not much to say about use of the abstraction IMO.\n\nFor instance, the QUIC protocol does not talk about how it could be used with UDP encapsulation like CONNECT-UDP. I'm not sure what we would say here in a profile that isn't already dealt with by the underlying substrate and the considerations people already have to make when using those.",
          "createdAt": "2025-05-10T02:14:58Z",
          "updatedAt": "2025-05-10T02:14:58Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "NONE",
          "body": "I would like to take the spec, program it, and make sure that I have good chances to interop with another implementations. I can see two useful \"profiles\": TLS1.3 over TCP, and QMUX over HTTPS. \n\nFor QMux/TLS1.3/TCP, we probably do not need much, the whole thing could be a single paragraph. But we need to specify an ALPN (qmux?), and we need to say something about the relation between QUIC frames and TLS records. We may also consider sending the transport parameters as a TLS extension, which would have the same timings as RFC 9000 and might be helpful. Or not.\n\nFor QMUX over HTTPS, we could consider either a basic Connect or web sockets. Not quite my area of expertise, but I assume that if we want interop we need to say something about well known URL, and maybe authentication.",
          "createdAt": "2025-05-10T04:31:25Z",
          "updatedAt": "2025-05-10T04:31:25Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for the clarification. The nature of these proposals as written avoids some of that complication. This document is not an application protocol in is own right, instead the expectation is that an application mapping would be defined on top it. Much like how we expect people to use QUIC. The concrete example we have is \"HTTP/3 on streams\" in https://www.ietf.org/archive/id/draft-kazuho-httpbis-http3-on-streams-00.html#section-4, which would use a different ALPN than regular HTTP/3.\n\nAssuming a model where ALPN is required to select mapping, then regular old CONNECT could work (yes you can CONNECT directly to a getwway if it wants to let you). A lighter weight model might be to define a specialised CONNECT variant, however I'm not sure that work needs to be right here and now. I'd certainly want to hear stronger motivating use cases. \n\nWrt websockets that seems even further out of scope. People can find lots of weird and wonderful substrates. They do it all the time (my team at the BBC years back built a gQUIC over WebSockets demo)  I'd rather focus on the core multiplexing design in this doc.\n\nI'm sure there's room for improvement on detailing these matters. Also curious to hear what Kazuho thinks",
          "createdAt": "2025-05-10T04:59:49Z",
          "updatedAt": "2025-05-10T04:59:49Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "OWNER",
          "body": "I think I agree with @LPardue that it should be up to each application to determine what encryption substrate or ALPN should be used.\n\nRegarding interop testing, I recall using HTTP/0.9 in QUIC stacks with an ALPN of something like \"hq-27\" indicating the use of QUIC v1 draft 27 as the transport.\n\nIf we are to have an interop of QMux using HTTP/0.9, I agree that we should agree on the ALPN and the TLS version. I'm fine with going with \"hqm-XX\" where XX is the draft version and using TLS/1.3.",
          "createdAt": "2025-05-13T00:58:13Z",
          "updatedAt": "2025-05-13T00:58:13Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "NONE",
          "body": "HQ meant http/0.9. What would hqm mean? Connect over HTTP 0.9? Or 1.1?(not that much different.) If we mean raw data over TLS 1.3, we should maybe use something else. Like, \"rt-xx\" for raw tls, draft version.",
          "createdAt": "2025-05-13T04:28:56Z",
          "updatedAt": "2025-05-13T04:28:56Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "OWNER",
          "body": "@huitema Ideally, I would just use \"hq,\" because QMux is just about using QUIC over TCP instead of UDP. But unfortunately, ALPN has to be different between TCP-based and UDP-based protocols.\n\nThat is how I think, and why I suggest using \"hqm-xx\" (analogous to \"hq-xx\") for identifying HTTP/0.9 sent over QMux.",
          "createdAt": "2025-05-13T05:39:27Z",
          "updatedAt": "2025-05-13T05:39:27Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "NONE",
          "body": "I see two applications here. One is \"hq-interop\" over QMux. Something like \"hqm-xx\" would be fine. The other is QMux over HTTP connect, in which case the ALPN in the TLS1.3 header should be a variant of HTTP (probably \"http/1.1\") and the information such as \"use QMUX to do HQM\"  should be passed in the \"path\" argument to CONNECT.",
          "createdAt": "2025-05-13T06:13:24Z",
          "updatedAt": "2025-05-13T06:13:24Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "OWNER",
          "body": "> The other is QMux over HTTP connect, in which case the ALPN in the TLS1.3 header should be a variant of HTTP (probably \"http/1.1\") and the information such as \"use QMUX to do HQM\" should be passed in the \"path\" argument to CONNECT.\n\nI'm not sure if I follow. I might be missing something, but ...\n\nThe purpose of the CONNECT method is to establish a TCP connection between the proxy and the server, while tunneling the exact same bytes over HTTP between the proxy and the client. Therefore, when a client using a HTTP CONNECT proxy connects to a service provided on top of QMux, the ALPN should be the same as the one that'd be used when connecting directly using TCP.\n\nTo give an example, if the application is HTTP/0.9 running on top of QMux, the ALPN should be the same (e.g., \"hqm-xx\") regardless of if connecting directly or through a CONNECT tunnel.",
          "createdAt": "2025-05-13T06:25:35Z",
          "updatedAt": "2025-05-13T06:25:35Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "NONE",
          "body": "OK. Let's start with \"hqm-xx\" for the interop.\nMy next concern is the relation between TLS records and Qmux frames. Is there any? Is it OK to have parts of a Qmux frame carried over several TLS records?",
          "createdAt": "2025-05-13T17:43:13Z",
          "updatedAt": "2025-05-13T17:43:13Z"
        }
      ]
    }
  ],
  "pulls": [
    {
      "number": 1,
      "id": "PR_kwDOKxyMNc5gg2O-",
      "title": "define mapping of DATAGRAM extension",
      "url": "https://github.com/kazuho/draft-kazuho-quic-quic-on-streams/pull/1",
      "state": "MERGED",
      "author": "kazuho",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "I'm not fully certain if we want to adopt this, but the pros would be that:\r\n* DATAGRAM frames will be available to any application protocol built on top of QUIC; HTTP/3 does have Capsules as the fallback but other application protocols may not.\r\n* DATAGRAM frames can be sent out of order. Capsules that require in-order delivery within the stream.",
      "createdAt": "2023-11-28T05:20:06Z",
      "updatedAt": "2023-11-30T01:24:29Z",
      "baseRepository": "kazuho/draft-kazuho-quic-quic-on-streams",
      "baseRefName": "main",
      "baseRefOid": "e92d9b499b12dbddaa1e51a0dde6387d6a5d4cb1",
      "headRepository": "kazuho/draft-kazuho-quic-quic-on-streams",
      "headRefName": "kazuho/datagram-frames",
      "headRefOid": "499cc6fec085bcdd40b5840601987af3dfae1a0e",
      "closedAt": "2023-11-30T01:24:29Z",
      "mergedAt": "2023-11-30T01:24:29Z",
      "mergedBy": "kazuho",
      "mergeCommit": {
        "oid": "47bf1935a1458ce55fbb857ca35736113de9aba8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKxyMNc5ojvwS",
          "commit": {
            "abbreviatedOid": "1bdfb97"
          },
          "author": "kazuho",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-29T00:51:25Z",
          "updatedAt": "2023-11-29T00:51:26Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "If we adopt #2, we can allow 0x30, which would mean that the frame size is max_frame_size bytes.",
              "createdAt": "2023-11-29T00:51:26Z",
              "updatedAt": "2023-11-29T00:51:26Z"
            }
          ]
        }
      ]
    },
    {
      "number": 2,
      "id": "PR_kwDOKxyMNc5gncUu",
      "title": "allow any STREAM frame",
      "url": "https://github.com/kazuho/draft-kazuho-quic-quic-on-streams/pull/2",
      "state": "MERGED",
      "author": "kazuho",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "I kind of think that we have made premature optimizations to the STREAM frame design, so this is a different take.\r\n\r\nIn the approach proposed in this PR:\r\n* Any STREAM frame type is allowed.\r\n* Unless the STREAM frame conveys the beginning of the stream, the frame will have the Offset field. This is indeed an overhead of the wire, but considering that minimum `max_frame_size` is 16KB, the overhead will be around 0.02% (i.e., 4/16834=0.0002, assuming an encoded Offset field of 4 bytes), so who cares?\r\n* When the Length field is omitted, size of the stream is `max_frame_size`. Now that we have the TP, we can do this.",
      "createdAt": "2023-11-29T00:49:30Z",
      "updatedAt": "2023-11-30T01:07:46Z",
      "baseRepository": "kazuho/draft-kazuho-quic-quic-on-streams",
      "baseRefName": "main",
      "baseRefOid": "b796613c457441cf346f1efead92733cf5bef8c8",
      "headRepository": "kazuho/draft-kazuho-quic-quic-on-streams",
      "headRefName": "kazuho/any-stream-frame",
      "headRefOid": "44438304b5be26f0bf397126854e800886772b87",
      "closedAt": "2023-11-30T01:07:46Z",
      "mergedAt": "2023-11-30T01:07:46Z",
      "mergedBy": "kazuho",
      "mergeCommit": {
        "oid": "e92d9b499b12dbddaa1e51a0dde6387d6a5d4cb1"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 3,
      "id": "PR_kwDOKxyMNc5lU6rC",
      "title": "Add Lucas",
      "url": "https://github.com/kazuho/draft-kazuho-quic-quic-on-streams/pull/3",
      "state": "MERGED",
      "author": "LPardue",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-01-29T13:32:25Z",
      "updatedAt": "2024-01-31T06:57:21Z",
      "baseRepository": "kazuho/draft-kazuho-quic-quic-on-streams",
      "baseRefName": "main",
      "baseRefOid": "fdd60437d9deae07fa746506d70c4b083f40e738",
      "headRepository": "LPardue/draft-kazuho-quic-quic-on-streams",
      "headRefName": "patch-1",
      "headRefOid": "10128eba377260ec147d826719414b789df93cb0",
      "closedAt": "2024-01-31T06:57:16Z",
      "mergedAt": "2024-01-31T06:57:16Z",
      "mergedBy": "kazuho",
      "mergeCommit": {
        "oid": "1ad1627f4ca1a04b61f226c56340f605aaa3fe37"
      },
      "comments": [
        {
          "author": "kazuho",
          "authorAssociation": "OWNER",
          "body": "Thank you!",
          "createdAt": "2024-01-31T06:57:20Z",
          "updatedAt": "2024-01-31T06:57:20Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 7,
      "id": "PR_kwDOKxyMNc5n1N_S",
      "title": "Expand text about prohibited frames",
      "url": "https://github.com/kazuho/draft-kazuho-quic-quic-on-streams/pull/7",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The prohibited frames are implicitly defined. I found while prototyping\r\nthat I had to expand them anyway.\r\n\r\nThis presentation format might help people realise how much can be omitted\r\nfrom an implementation - roughly hald the frames.",
      "createdAt": "2024-02-25T01:52:51Z",
      "updatedAt": "2024-02-25T01:56:38Z",
      "baseRepository": "kazuho/draft-kazuho-quic-quic-on-streams",
      "baseRefName": "main",
      "baseRefOid": "ae5462967134b654a9973858f2823f51b6717070",
      "headRepository": "LPardue/draft-kazuho-quic-quic-on-streams",
      "headRefName": "expand-prohibition",
      "headRefOid": "ae5462967134b654a9973858f2823f51b6717070",
      "closedAt": "2024-02-25T01:53:45Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "LPardue",
          "authorAssociation": "COLLABORATOR",
          "body": "Sorry, my Github-fu failed me on this, so had to open another",
          "createdAt": "2024-02-25T01:56:37Z",
          "updatedAt": "2024-02-25T01:56:37Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 8,
      "id": "PR_kwDOKxyMNc5n1OG9",
      "title": "Expand text about prohibited frames",
      "url": "https://github.com/kazuho/draft-kazuho-quic-quic-on-streams/pull/8",
      "state": "MERGED",
      "author": "LPardue",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The prohibited frames are implicitly defined. I found while prototyping\r\nthat I had to expand them anyway.\r\n\r\nThis presentation format might help people realise how much can be omitted\r\nfrom an implementation - roughly hald the frames.",
      "createdAt": "2024-02-25T01:55:55Z",
      "updatedAt": "2024-02-25T01:58:07Z",
      "baseRepository": "kazuho/draft-kazuho-quic-quic-on-streams",
      "baseRefName": "main",
      "baseRefOid": "ae5462967134b654a9973858f2823f51b6717070",
      "headRepository": "LPardue/draft-kazuho-quic-quic-on-streams",
      "headRefName": "expand-prohibition",
      "headRefOid": "06b72b11fafec6fdbbd39e930d9d6cb388938112",
      "closedAt": "2024-02-25T01:57:51Z",
      "mergedAt": "2024-02-25T01:57:51Z",
      "mergedBy": "kazuho",
      "mergeCommit": {
        "oid": "c3b222bdaec1f7f56cb2fd8b2f9e6a23bede1c12"
      },
      "comments": [
        {
          "author": "kazuho",
          "authorAssociation": "OWNER",
          "body": "Makes perfect sense! Thank you.",
          "createdAt": "2024-02-25T01:58:06Z",
          "updatedAt": "2024-02-25T01:58:06Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 10,
      "id": "PR_kwDOKxyMNc5quWAE",
      "title": "add Jana",
      "url": "https://github.com/kazuho/draft-kazuho-quic-quic-on-streams/pull/10",
      "state": "MERGED",
      "author": "kazuho",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "@janaiyengar PTAL",
      "createdAt": "2024-03-26T00:32:16Z",
      "updatedAt": "2024-03-28T00:08:43Z",
      "baseRepository": "kazuho/draft-kazuho-quic-quic-on-streams",
      "baseRefName": "main",
      "baseRefOid": "c3b222bdaec1f7f56cb2fd8b2f9e6a23bede1c12",
      "headRepository": "kazuho/draft-kazuho-quic-quic-on-streams",
      "headRefName": "kazuho/add-jana",
      "headRefOid": "8a63453e1270062b7cddef4204ef045ff51cf2f0",
      "closedAt": "2024-03-28T00:08:43Z",
      "mergedAt": "2024-03-28T00:08:43Z",
      "mergedBy": "kazuho",
      "mergeCommit": {
        "oid": "ed970c3fb9db7fbd28fdc3b09ba40e0eea079278"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKxyMNc50yW1T",
          "commit": {
            "abbreviatedOid": "8a63453"
          },
          "author": "LPardue",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-26T05:22:20Z",
          "updatedAt": "2024-03-26T05:22:20Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKxyMNc51HsG2",
          "commit": {
            "abbreviatedOid": "8a63453"
          },
          "author": "janaiyengar",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-28T00:07:27Z",
          "updatedAt": "2024-03-28T00:07:27Z",
          "comments": []
        }
      ]
    },
    {
      "number": 13,
      "id": "PR_kwDOKxyMNc6eG9ji",
      "title": "update github actions",
      "url": "https://github.com/kazuho/draft-kazuho-quic-quic-on-streams/pull/13",
      "state": "MERGED",
      "author": "kazuho",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "To the head of https://github.com/martinthomson/internet-draft-template (currently at commit 666634c).",
      "createdAt": "2025-07-09T11:38:41Z",
      "updatedAt": "2025-07-09T11:38:49Z",
      "baseRepository": "kazuho/draft-kazuho-quic-quic-on-streams",
      "baseRefName": "main",
      "baseRefOid": "ed970c3fb9db7fbd28fdc3b09ba40e0eea079278",
      "headRepository": "kazuho/draft-kazuho-quic-quic-on-streams",
      "headRefName": "kazuho/update-actions",
      "headRefOid": "84610d9ca91ef776c515f7e27ddc78b1211fc6b4",
      "closedAt": "2025-07-09T11:38:49Z",
      "mergedAt": "2025-07-09T11:38:49Z",
      "mergedBy": "kazuho",
      "mergeCommit": {
        "oid": "b458108297b98675a15174f5ddc97ca80102613e"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 14,
      "id": "PR_kwDOKxyMNc6eG_dr",
      "title": "rebranding",
      "url": "https://github.com/kazuho/draft-kazuho-quic-quic-on-streams/pull/14",
      "state": "MERGED",
      "author": "kazuho",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "QoS is now QMux.",
      "createdAt": "2025-07-09T11:41:58Z",
      "updatedAt": "2025-07-21T14:05:58Z",
      "baseRepository": "kazuho/draft-kazuho-quic-quic-on-streams",
      "baseRefName": "main",
      "baseRefOid": "b458108297b98675a15174f5ddc97ca80102613e",
      "headRepository": "kazuho/draft-kazuho-quic-quic-on-streams",
      "headRefName": "kazuho/rename-to-qmux",
      "headRefOid": "63c64186ff5899bdd236fed47ae2497ac72c4d41",
      "closedAt": "2025-07-21T14:05:48Z",
      "mergedAt": "2025-07-21T14:05:48Z",
      "mergedBy": "kazuho",
      "mergeCommit": {
        "oid": "fd76dfa9ad52e818102b6541ee00b160829332ce"
      },
      "comments": [
        {
          "author": "kazuho",
          "authorAssociation": "OWNER",
          "body": "Thank you for the reviews!",
          "createdAt": "2025-07-21T14:05:58Z",
          "updatedAt": "2025-07-21T14:05:58Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKxyMNc6y76MY",
          "commit": {
            "abbreviatedOid": "e57116b"
          },
          "author": "LPardue",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-07-09T15:36:14Z",
          "updatedAt": "2025-07-09T15:36:14Z",
          "comments": [
            {
              "originalPosition": 166,
              "body": "nit: the figure anchor still has `qs`. It doesn't really matter but wanted to point it out incase someone cares.",
              "createdAt": "2025-07-09T15:36:14Z",
              "updatedAt": "2025-07-09T15:36:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKxyMNc6y77ga",
          "commit": {
            "abbreviatedOid": "e57116b"
          },
          "author": "LPardue",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM modulo nit",
          "createdAt": "2025-07-09T15:37:52Z",
          "updatedAt": "2025-07-09T15:37:52Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKxyMNc609X9v",
          "commit": {
            "abbreviatedOid": "e57116b"
          },
          "author": "ekinnear",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Just silly textual nits",
          "createdAt": "2025-07-20T11:40:28Z",
          "updatedAt": "2025-07-20T11:42:36Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "```suggestion\r\nQMux can be used on any transport that provides a bi-directional, byte-oriented\r\n```",
              "createdAt": "2025-07-20T11:40:28Z",
              "updatedAt": "2025-07-20T11:42:36Z"
            },
            {
              "originalPosition": 43,
              "body": "```suggestion\r\n  that transport permits.\r\n```",
              "createdAt": "2025-07-20T11:40:51Z",
              "updatedAt": "2025-07-20T11:42:36Z"
            },
            {
              "originalPosition": 166,
              "body": "Eh, sure, consistency is nice\r\n```suggestion\r\n{: #fig-qx-ping title=\"QX_PING Frame Format\"}\r\n```",
              "createdAt": "2025-07-20T11:41:28Z",
              "updatedAt": "2025-07-20T11:42:36Z"
            },
            {
              "originalPosition": 128,
              "body": "```suggestion\r\nThe QX_TRANSPORT_PARAMETERS frame is the first frame sent by endpoints.\r\n```",
              "createdAt": "2025-07-20T11:41:42Z",
              "updatedAt": "2025-07-20T11:42:36Z"
            },
            {
              "originalPosition": 140,
              "body": "Should we also QS->QX this :) ",
              "createdAt": "2025-07-20T11:42:08Z",
              "updatedAt": "2025-07-20T11:42:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKxyMNc61CXOf",
          "commit": {
            "abbreviatedOid": "e57116b"
          },
          "author": "kazuho",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-07-21T09:45:42Z",
          "updatedAt": "2025-07-21T09:45:42Z",
          "comments": [
            {
              "originalPosition": 140,
              "body": "Good point, went with \"\\xffQMX\\r\\n\\r\\n\".",
              "createdAt": "2025-07-21T09:45:42Z",
              "updatedAt": "2025-07-21T09:45:43Z"
            }
          ]
        }
      ]
    },
    {
      "number": 15,
      "id": "PR_kwDOKxyMNc6fu15h",
      "title": "Update co-authors",
      "url": "https://github.com/kazuho/draft-kazuho-quic-quic-on-streams/pull/15",
      "state": "MERGED",
      "author": "ekinnear",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Update co-authors",
      "createdAt": "2025-07-20T11:47:48Z",
      "updatedAt": "2025-07-20T11:49:55Z",
      "baseRepository": "kazuho/draft-kazuho-quic-quic-on-streams",
      "baseRefName": "main",
      "baseRefOid": "b458108297b98675a15174f5ddc97ca80102613e",
      "headRepository": "ekinnear/draft-kazuho-quic-quic-on-streams",
      "headRefName": "author-update",
      "headRefOid": "0d4f1f75bf7d5a1f88bc4d96c3239a2e644dd8d8",
      "closedAt": "2025-07-20T11:49:36Z",
      "mergedAt": "2025-07-20T11:49:36Z",
      "mergedBy": "kazuho",
      "mergeCommit": {
        "oid": "450e62321b67cec544d5a0ab59d95ea5d20ceeb5"
      },
      "comments": [
        {
          "author": "kazuho",
          "authorAssociation": "OWNER",
          "body": "Thank you for the PR. Merged.",
          "createdAt": "2025-07-20T11:49:55Z",
          "updatedAt": "2025-07-20T11:49:55Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 16,
      "id": "PR_kwDOKxyMNc6f0GVK",
      "title": "change Jana's org",
      "url": "https://github.com/kazuho/draft-kazuho-quic-quic-on-streams/pull/16",
      "state": "MERGED",
      "author": "kazuho",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-07-21T09:32:51Z",
      "updatedAt": "2025-07-21T09:34:52Z",
      "baseRepository": "kazuho/draft-kazuho-quic-quic-on-streams",
      "baseRefName": "main",
      "baseRefOid": "450e62321b67cec544d5a0ab59d95ea5d20ceeb5",
      "headRepository": "kazuho/draft-kazuho-quic-quic-on-streams",
      "headRefName": "kazuho-patch-1",
      "headRefOid": "37208c96a6fe37c3be08dd09b07079cae80c7d31",
      "closedAt": "2025-07-21T09:34:52Z",
      "mergedAt": "2025-07-21T09:34:52Z",
      "mergedBy": "kazuho",
      "mergeCommit": {
        "oid": "3aab4ca3991af8a8e7558e4bc5c9398bc17f2835"
      },
      "comments": [],
      "reviews": []
    }
  ]
}