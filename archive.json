{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2024-12-19T00:29:02.778920+00:00",
  "repo": "kazuho/draft-kazuho-quic-quic-on-streams",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    }
  ],
  "issues": [
    {
      "number": 4,
      "id": "I_kwDOKxyMNc5_cwxL",
      "title": "remove the offset from STREAM frames",
      "url": "https://github.com/kazuho/draft-kazuho-quic-quic-on-streams/issues/4",
      "state": "OPEN",
      "author": "marten-seemann",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Because we obviously can on an ordered transport. Also gets rid of the need to check for ordering. ",
      "createdAt": "2024-02-16T09:55:22Z",
      "updatedAt": "2024-02-21T14:13:00Z",
      "closedAt": null,
      "comments": [
        {
          "author": "marten-seemann",
          "authorAssociation": "NONE",
          "body": "Similarly for BLOCKED* frames and RESET_STREAM frames.",
          "createdAt": "2024-02-16T11:02:40Z",
          "updatedAt": "2024-02-16T11:02:40Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "OWNER",
          "body": "Thanks,\r\n\r\nThe approach adopted by the initial draft is to facilitate code reuse between QUIC v1 and QUIC for Streams, by minimize the changes to the frame encoding. We prohibit use of some frames, but otherwise the frame encodings are left unmodified.\r\n\r\nAs stated on the mailing list, I think [the proposal](https://mailarchive.ietf.org/arch/msg/quic/HL_doKGvcBTrByv-69QeY0hJUKY/) by @hlandau to prohibit use of STREAM frames without Length field seems palatable. Because it is just have prohibiting use of some 1-byte frame code points.\r\n\r\nHowever, I have the fear of changing the encoding of each frame, as IMO that would only increase the cost of maintaining the two QUIC stacks (i.e,. QUIC v1 and QUIC on Streams), due to having increased divergence.\r\n\r\nPS. I'm not sure if we can remove the Offset field of BLOCKED* frames, recalling that communicating the moment of getting blocked has been considered a valuable property of those frames. Also, for RESET_STREAM frames, I'm not sure if we want to (or have to) mandate that the final offset being \"sent\" should mean exactly the offset to which a QoS stack has written to the TCP send buffer.",
          "createdAt": "2024-02-19T00:50:08Z",
          "updatedAt": "2024-02-19T00:51:08Z"
        },
        {
          "author": "hlandau",
          "authorAssociation": "NONE",
          "body": "- I agree we generally shouldn't change frame encodings.\r\n- Prohibiting encodings is a different matter and I definitely think it is the better option to prohibit the implicit length encoding here.\r\n- I don't think it is worth removing the offset field even if it is technically unnecessary and saves a marginal amount of bandwidth. We should preserve the encodings.",
          "createdAt": "2024-02-21T14:12:59Z",
          "updatedAt": "2024-02-21T14:12:59Z"
        }
      ]
    },
    {
      "number": 5,
      "id": "I_kwDOKxyMNc5_iIsc",
      "title": "point out that migration is provided by MPTCP",
      "url": "https://github.com/kazuho/draft-kazuho-quic-quic-on-streams/issues/5",
      "state": "OPEN",
      "author": "kazuho",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "as pointed out in https://mailarchive.ietf.org/arch/msg/quic/tkZyGmV8HelRR9BSpwwbYv6v0qE/.",
      "createdAt": "2024-02-17T00:05:28Z",
      "updatedAt": "2024-02-17T00:05:28Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 6,
      "id": "I_kwDOKxyMNc6ATWJe",
      "title": "Clearly document downsides",
      "url": "https://github.com/kazuho/draft-kazuho-quic-quic-on-streams/issues/6",
      "state": "OPEN",
      "author": "LPardue",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I received an off-comment list that the downsides of this proposal compared to native QUIC could be more clearly documented.",
      "createdAt": "2024-02-25T01:37:39Z",
      "updatedAt": "2024-02-26T16:00:21Z",
      "closedAt": null,
      "comments": [
        {
          "author": "frochet",
          "authorAssociation": "NONE",
          "body": "It could be great to precise that those downsides can be fixed through \"TCPLS extensions on QUIC on streams\", as per our off-list discussion. This would also acknowledge our work, given how close it is to QUIC on streams. Thanks!",
          "createdAt": "2024-02-26T16:00:20Z",
          "updatedAt": "2024-02-26T16:00:20Z"
        }
      ]
    },
    {
      "number": 9,
      "id": "I_kwDOKxyMNc6AbzC9",
      "title": "Risks of deadlock due to flow control",
      "url": "https://github.com/kazuho/draft-kazuho-quic-quic-on-streams/issues/9",
      "state": "OPEN",
      "author": "LPardue",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Roberto Peon highlighted on the list discussion that some streams, like TCP, have flow control that could interfere with control messages required at the QUIC or higher layers. In particular, layered flow controlbut not restricted to that. \r\n\r\nHTTP/2 has some discussion about this in https://www.rfc-editor.org/rfc/rfc9113.html#name-appropriate-use-of-flow-con\r\n\r\nWe need some text that gives due consideration to the matter. Potentially offering some recommendations to higher-level protocols that might add even more stuff on top of QUIC. One proposal from Roberto was `...require always reading all bytes/frames sent on the socket, always.` but we should give a bit more thought to the topic.",
      "createdAt": "2024-02-26T17:52:36Z",
      "updatedAt": "2024-04-03T07:14:51Z",
      "closedAt": null,
      "comments": [
        {
          "author": "hlandau",
          "authorAssociation": "NONE",
          "body": "My own assumption is that implementations indeed would \"always read all bytes/frames sent on the socket, always\", in which case this isn't an issue. So my question is, is there a valid rationale for an implementation not doing that?\r\n\r\nIn terms of hardening against resource consumption attacks, if an implementation always reads all bytes/frames sent on the socket, every frame sent either\r\n\r\n1. has no effect, or\r\n2. mutates internal data structures of finite size, or\r\n3. adds stream data.\r\n\r\nOnly (3) seems an issue, but that is all governed by QUIC flow control and will result in connection termination if the protocol rules are violated.\r\n\r\nAm I missing something here?\r\n\r\nI suppose an implementation could send an unreasonable volume of PADDING frames, or of expensive-to-process frames like ACK. It seems like it would be OK for an implementation to *rate-limit* the processing of incoming data so long as the rate isn't zero.",
          "createdAt": "2024-04-03T07:14:50Z",
          "updatedAt": "2024-04-03T07:14:50Z"
        }
      ]
    }
  ],
  "pulls": [
    {
      "number": 1,
      "id": "PR_kwDOKxyMNc5gg2O-",
      "title": "define mapping of DATAGRAM extension",
      "url": "https://github.com/kazuho/draft-kazuho-quic-quic-on-streams/pull/1",
      "state": "MERGED",
      "author": "kazuho",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "I'm not fully certain if we want to adopt this, but the pros would be that:\r\n* DATAGRAM frames will be available to any application protocol built on top of QUIC; HTTP/3 does have Capsules as the fallback but other application protocols may not.\r\n* DATAGRAM frames can be sent out of order. Capsules that require in-order delivery within the stream.",
      "createdAt": "2023-11-28T05:20:06Z",
      "updatedAt": "2023-11-30T01:24:29Z",
      "baseRepository": "kazuho/draft-kazuho-quic-quic-on-streams",
      "baseRefName": "main",
      "baseRefOid": "e92d9b499b12dbddaa1e51a0dde6387d6a5d4cb1",
      "headRepository": "kazuho/draft-kazuho-quic-quic-on-streams",
      "headRefName": "kazuho/datagram-frames",
      "headRefOid": "499cc6fec085bcdd40b5840601987af3dfae1a0e",
      "closedAt": "2023-11-30T01:24:29Z",
      "mergedAt": "2023-11-30T01:24:29Z",
      "mergedBy": "kazuho",
      "mergeCommit": {
        "oid": "47bf1935a1458ce55fbb857ca35736113de9aba8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKxyMNc5ojvwS",
          "commit": {
            "abbreviatedOid": "1bdfb97"
          },
          "author": "kazuho",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-29T00:51:25Z",
          "updatedAt": "2023-11-29T00:51:26Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "If we adopt #2, we can allow 0x30, which would mean that the frame size is max_frame_size bytes.",
              "createdAt": "2023-11-29T00:51:26Z",
              "updatedAt": "2023-11-29T00:51:26Z"
            }
          ]
        }
      ]
    },
    {
      "number": 2,
      "id": "PR_kwDOKxyMNc5gncUu",
      "title": "allow any STREAM frame",
      "url": "https://github.com/kazuho/draft-kazuho-quic-quic-on-streams/pull/2",
      "state": "MERGED",
      "author": "kazuho",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "I kind of think that we have made premature optimizations to the STREAM frame design, so this is a different take.\r\n\r\nIn the approach proposed in this PR:\r\n* Any STREAM frame type is allowed.\r\n* Unless the STREAM frame conveys the beginning of the stream, the frame will have the Offset field. This is indeed an overhead of the wire, but considering that minimum `max_frame_size` is 16KB, the overhead will be around 0.02% (i.e., 4/16834=0.0002, assuming an encoded Offset field of 4 bytes), so who cares?\r\n* When the Length field is omitted, size of the stream is `max_frame_size`. Now that we have the TP, we can do this.",
      "createdAt": "2023-11-29T00:49:30Z",
      "updatedAt": "2023-11-30T01:07:46Z",
      "baseRepository": "kazuho/draft-kazuho-quic-quic-on-streams",
      "baseRefName": "main",
      "baseRefOid": "b796613c457441cf346f1efead92733cf5bef8c8",
      "headRepository": "kazuho/draft-kazuho-quic-quic-on-streams",
      "headRefName": "kazuho/any-stream-frame",
      "headRefOid": "44438304b5be26f0bf397126854e800886772b87",
      "closedAt": "2023-11-30T01:07:46Z",
      "mergedAt": "2023-11-30T01:07:46Z",
      "mergedBy": "kazuho",
      "mergeCommit": {
        "oid": "e92d9b499b12dbddaa1e51a0dde6387d6a5d4cb1"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 3,
      "id": "PR_kwDOKxyMNc5lU6rC",
      "title": "Add Lucas",
      "url": "https://github.com/kazuho/draft-kazuho-quic-quic-on-streams/pull/3",
      "state": "MERGED",
      "author": "LPardue",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-01-29T13:32:25Z",
      "updatedAt": "2024-01-31T06:57:21Z",
      "baseRepository": "kazuho/draft-kazuho-quic-quic-on-streams",
      "baseRefName": "main",
      "baseRefOid": "fdd60437d9deae07fa746506d70c4b083f40e738",
      "headRepository": "LPardue/draft-kazuho-quic-quic-on-streams",
      "headRefName": "patch-1",
      "headRefOid": "10128eba377260ec147d826719414b789df93cb0",
      "closedAt": "2024-01-31T06:57:16Z",
      "mergedAt": "2024-01-31T06:57:16Z",
      "mergedBy": "kazuho",
      "mergeCommit": {
        "oid": "1ad1627f4ca1a04b61f226c56340f605aaa3fe37"
      },
      "comments": [
        {
          "author": "kazuho",
          "authorAssociation": "OWNER",
          "body": "Thank you!",
          "createdAt": "2024-01-31T06:57:20Z",
          "updatedAt": "2024-01-31T06:57:20Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 7,
      "id": "PR_kwDOKxyMNc5n1N_S",
      "title": "Expand text about prohibited frames",
      "url": "https://github.com/kazuho/draft-kazuho-quic-quic-on-streams/pull/7",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The prohibited frames are implicitly defined. I found while prototyping\r\nthat I had to expand them anyway.\r\n\r\nThis presentation format might help people realise how much can be omitted\r\nfrom an implementation - roughly hald the frames.",
      "createdAt": "2024-02-25T01:52:51Z",
      "updatedAt": "2024-02-25T01:56:38Z",
      "baseRepository": "kazuho/draft-kazuho-quic-quic-on-streams",
      "baseRefName": "main",
      "baseRefOid": "ae5462967134b654a9973858f2823f51b6717070",
      "headRepository": "LPardue/draft-kazuho-quic-quic-on-streams",
      "headRefName": "expand-prohibition",
      "headRefOid": "ae5462967134b654a9973858f2823f51b6717070",
      "closedAt": "2024-02-25T01:53:45Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "LPardue",
          "authorAssociation": "COLLABORATOR",
          "body": "Sorry, my Github-fu failed me on this, so had to open another",
          "createdAt": "2024-02-25T01:56:37Z",
          "updatedAt": "2024-02-25T01:56:37Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 8,
      "id": "PR_kwDOKxyMNc5n1OG9",
      "title": "Expand text about prohibited frames",
      "url": "https://github.com/kazuho/draft-kazuho-quic-quic-on-streams/pull/8",
      "state": "MERGED",
      "author": "LPardue",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The prohibited frames are implicitly defined. I found while prototyping\r\nthat I had to expand them anyway.\r\n\r\nThis presentation format might help people realise how much can be omitted\r\nfrom an implementation - roughly hald the frames.",
      "createdAt": "2024-02-25T01:55:55Z",
      "updatedAt": "2024-02-25T01:58:07Z",
      "baseRepository": "kazuho/draft-kazuho-quic-quic-on-streams",
      "baseRefName": "main",
      "baseRefOid": "ae5462967134b654a9973858f2823f51b6717070",
      "headRepository": "LPardue/draft-kazuho-quic-quic-on-streams",
      "headRefName": "expand-prohibition",
      "headRefOid": "06b72b11fafec6fdbbd39e930d9d6cb388938112",
      "closedAt": "2024-02-25T01:57:51Z",
      "mergedAt": "2024-02-25T01:57:51Z",
      "mergedBy": "kazuho",
      "mergeCommit": {
        "oid": "c3b222bdaec1f7f56cb2fd8b2f9e6a23bede1c12"
      },
      "comments": [
        {
          "author": "kazuho",
          "authorAssociation": "OWNER",
          "body": "Makes perfect sense! Thank you.",
          "createdAt": "2024-02-25T01:58:06Z",
          "updatedAt": "2024-02-25T01:58:06Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 10,
      "id": "PR_kwDOKxyMNc5quWAE",
      "title": "add Jana",
      "url": "https://github.com/kazuho/draft-kazuho-quic-quic-on-streams/pull/10",
      "state": "MERGED",
      "author": "kazuho",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "@janaiyengar PTAL",
      "createdAt": "2024-03-26T00:32:16Z",
      "updatedAt": "2024-03-28T00:08:43Z",
      "baseRepository": "kazuho/draft-kazuho-quic-quic-on-streams",
      "baseRefName": "main",
      "baseRefOid": "c3b222bdaec1f7f56cb2fd8b2f9e6a23bede1c12",
      "headRepository": "kazuho/draft-kazuho-quic-quic-on-streams",
      "headRefName": "kazuho/add-jana",
      "headRefOid": "8a63453e1270062b7cddef4204ef045ff51cf2f0",
      "closedAt": "2024-03-28T00:08:43Z",
      "mergedAt": "2024-03-28T00:08:43Z",
      "mergedBy": "kazuho",
      "mergeCommit": {
        "oid": "ed970c3fb9db7fbd28fdc3b09ba40e0eea079278"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKxyMNc50yW1T",
          "commit": {
            "abbreviatedOid": "8a63453"
          },
          "author": "LPardue",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-26T05:22:20Z",
          "updatedAt": "2024-03-26T05:22:20Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKxyMNc51HsG2",
          "commit": {
            "abbreviatedOid": "8a63453"
          },
          "author": "janaiyengar",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-28T00:07:27Z",
          "updatedAt": "2024-03-28T00:07:27Z",
          "comments": []
        }
      ]
    }
  ]
}